package udp;

import java.net.*;
import java.io.*;

public class UDPChatClient {
    private DatagramSocket socket;
    private InetAddress serverAddress;
    private int serverPort;
    private UDPChatClientUI ui;

    public UDPChatClient(String serverAddress, int serverPort) {
        try {
            this.socket = new DatagramSocket();
            this.serverAddress = InetAddress.getByName(serverAddress);
            this.serverPort = serverPort;
            this.ui = new UDPChatClientUI();  // 初始化 UI 界面

            // 设置发送消息按钮的事件监听器
            this.ui.addSendButtonListener(e -> sendMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 发送消息
    private void sendMessage() {
        String message = ui.getInputText();
        if (!message.isEmpty()) {
            try {
                byte[] sendData = message.getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, serverAddress, serverPort);
                socket.send(sendPacket);  // 发送消息

                ui.appendMessage("客户端: " + message);  // 更新消息区域
                ui.clearInputField();  // 清空输入框
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // 接收服务器消息
    public void receiveMessage() {
        new Thread(() -> {
            try {
                while (true) {
                    byte[] receiveData = new byte[1024];
                    DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                    socket.receive(receivePacket);  // 接收数据报
                    String message = new String(receivePacket.getData(), 0, receivePacket.getLength());

                    ui.appendMessage("服务器: " + message);  // 更新消息区域
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }

    public static void main(String[] args) {
        UDPChatClient client = new UDPChatClient("localhost", 9876);
        client.receiveMessage();  // 启动接收消息的线程
    }
}
